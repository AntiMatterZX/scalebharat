version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: startup-connect-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
      - HOSTNAME=0.0.0.0
    env_file:
      - .env.production
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.startup-connect.rule=Host(`your-domain.com`)"
      - "traefik.http.routers.startup-connect.tls=true"
      - "traefik.http.routers.startup-connect.tls.certresolver=letsencrypt"

  redis:
    image: redis:7-alpine
    container_name: startup-connect-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # Optional: Nginx reverse proxy for better performance
  nginx:
    image: nginx:alpine
    container_name: startup-connect-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - app-network

volumes:
  redis-data:
    driver: local

networks:
  app-network:
    driver: bridge 